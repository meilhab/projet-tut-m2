catherine@catherine-VPCEB3L1E:~/Documents/M2/ProjetTut/projet-tut-m2/Ticc/ticc-0.20.1$ ./ticc
        Objective Caml version 3.11.2

# open Ticc;;
# parse "./examples/tutorial/fire-detector.si";;
- : unit = ()
# let controlunit = mk_sym "ControlUnit";;
val controlunit : Ticc.symbolic_module_t = <abstr>
# let fire1 = mk_sym "FireDetector1";;
val fire1 : Ticc.symbolic_module_t = <abstr>
# let fire2 = mk_sym "FireDetector2";;
val fire2 : Ticc.symbolic_module_t = <abstr>
# print_symmod controlunit;;

===================================
Printing symbolic module ControlUnit.
* All variables:
{ ControlUnit.s }
 
* History variables: 
{ ControlUnit.s }
 
* Local variables: 
{ ControlUnit.s }
 
* Global variables: 
{ }
 
* Input Invariant:
(1) 

* Output Invariant:
(1) 

* Initial Condition:
(1) 
* Rules:

action FD:--------
Modifies only variables in: 
{ ControlUnit.s }
----[output]:
Owned by module ControlUnit
(
 (ControlUnit.s = 2)(
   (ControlUnit.s' = 3)) ) 
action fire:--------
Modifies only variables in: 
{ ControlUnit.s }
----[input global]:
(
 (ControlUnit.s = 1)) 
----[input local]:
(
 (ControlUnit.s = 1)(
   (ControlUnit.s' = 2)) ) 


action _env_action:--------
Modifies only variables in: 
{ }
----[input global]:
(1) 
----[input local]:
(1) 


action FD:--------
Modifies only variables in: 
{ }
----[input global]:
(0) 
----[input local]:
(0) 


endmodule
===================================

- : unit = ()
# print_symmod fire1;;

===================================
Printing symbolic module FireDetector1.
* All variables:
{ FireDetector1.s }
 
* History variables: 
{ FireDetector1.s }
 
* Local variables: 
{ FireDetector1.s }
 
* Global variables: 
{ }
 
* Input Invariant:
(1) 

* Output Invariant:
(1) 

* Initial Condition:
(1) 
* Rules:

action fire:--------
Modifies only variables in: 
{ FireDetector1.s }
----[output]:
Owned by module FireDetector1
(
 (FireDetector1.s = 2)(
   (FireDetector1.s' = 3)) ) 
action fire:--------
Modifies only variables in: 
{ }
----[input global]:
(1) 
----[input local]:
(1) 


action _env_action:--------
Modifies only variables in: 
{ }
----[input global]:
(1) 
----[input local]:
(1) 


action smoke1:--------
Modifies only variables in: 
{ FireDetector1.s }
----[input global]:
(
 (FireDetector1.s = 1)) 
----[input local]:
(
 (FireDetector1.s = 1)(
   (FireDetector1.s' = 2)) ) 


endmodule
===================================

- : unit = ()
# print_symmod fire2;;

===================================
Printing symbolic module FireDetector2.
* All variables:
{ FireDetector2.s }
 
* History variables: 
{ FireDetector2.s }
 
* Local variables: 
{ FireDetector2.s }
 
* Global variables: 
{ }
 
* Input Invariant:
(1) 

* Output Invariant:
(1) 

* Initial Condition:
(1) 
* Rules:

action fire:--------
Modifies only variables in: 
{ FireDetector2.s }
----[output]:
Owned by module FireDetector2
(
 (FireDetector2.s = 2)(
   (FireDetector2.s' = 3)) ) 
action fire:--------
Modifies only variables in: 
{ }
----[input global]:
(1) 
----[input local]:
(1) 


action _env_action:--------
Modifies only variables in: 
{ }
----[input global]:
(1) 
----[input local]:
(1) 


action smoke2:--------
Modifies only variables in: 
{ FireDetector2.s }
----[input global]:
(
 (FireDetector2.s = 1)) 
----[input local]:
(
 (FireDetector2.s = 1)(
   (FireDetector2.s' = 2)) ) 


endmodule
===================================

- : unit = ()
# let compose2 = compose controlunit fire1;;
val compose2 : Ticc.symbolic_module_t = <abstr>
# let compose3 = compose compose2 fire2;;
val compose3 : Ticc.symbolic_module_t = <abstr>
# print_symmod compose3;;

===================================
Printing symbolic module ControlUnit*FireDetector1*FireDetector2.
* All variables:
{ ControlUnit.s FireDetector1.s FireDetector2.s }
 
* History variables: 
{ ControlUnit.s FireDetector1.s FireDetector2.s }
 
* Local variables: 
{ ControlUnit.s FireDetector1.s FireDetector2.s }
 
* Global variables: 
{ }
 
* Input Invariant:
(
 (ControlUnit.s = 0)(
   (FireDetector1.s = 0)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) 
    + 
   (FireDetector1.s = 1)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) 
    + 
   (FireDetector1.s = 3)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) ) 
  + 
 (ControlUnit.s = 1)(
   (FireDetector2.s = 0)
    + 
   (FireDetector2.s = 1)
    + 
   (FireDetector2.s = 3)) 
  + 
 (ControlUnit.s = 2)(
   (FireDetector1.s = 0)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) 
    + 
   (FireDetector1.s = 1)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) 
    + 
   (FireDetector1.s = 3)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) ) 
  + 
 (ControlUnit.s = 3)(
   (FireDetector1.s = 0)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) 
    + 
   (FireDetector1.s = 1)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) 
    + 
   (FireDetector1.s = 3)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) ) ) 

* Output Invariant:
(1) 

* Initial Condition:
(
 (ControlUnit.s = 0)(
   (FireDetector1.s = 0)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) 
    + 
   (FireDetector1.s = 1)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) 
    + 
   (FireDetector1.s = 3)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) ) 
  + 
 (ControlUnit.s = 1)(
   (FireDetector2.s = 0)
    + 
   (FireDetector2.s = 1)
    + 
   (FireDetector2.s = 3)) 
  + 
 (ControlUnit.s = 2)(
   (FireDetector1.s = 0)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) 
    + 
   (FireDetector1.s = 1)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) 
    + 
   (FireDetector1.s = 3)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) ) 
  + 
 (ControlUnit.s = 3)(
   (FireDetector1.s = 0)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) 
    + 
   (FireDetector1.s = 1)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) 
    + 
   (FireDetector1.s = 3)(
     (FireDetector2.s = 0)
      + 
     (FireDetector2.s = 1)
      + 
     (FireDetector2.s = 3)) ) ) 
* Rules:

action fire:--------
Modifies only variables in: 
{ ControlUnit.s FireDetector2.s }
----[output]:
Owned by module FireDetector2
(
 (ControlUnit.s = 1)(
   (ControlUnit.s' = 2)(
     (FireDetector2.s = 2)(
       (FireDetector2.s' = 3)) ) ) ) 
action fire:--------
Modifies only variables in: 
{ ControlUnit.s FireDetector1.s }
----[output]:
Owned by module FireDetector1
(
 (ControlUnit.s = 1)(
   (ControlUnit.s' = 2)(
     (FireDetector1.s = 2)(
       (FireDetector1.s' = 3)) ) ) ) 
action FD:--------
Modifies only variables in: 
{ ControlUnit.s }
----[output]:
Owned by module ControlUnit
(
 (ControlUnit.s = 2)(
   (ControlUnit.s' = 3)) ) 
action fire:--------
Modifies only variables in: 
{ ControlUnit.s }
----[input global]:
(
 (ControlUnit.s = 1)) 
----[input local]:
(
 (ControlUnit.s = 1)(
   (ControlUnit.s' = 2)) ) 


action _env_action:--------
Modifies only variables in: 
{ }
----[input global]:
(1) 
----[input local]:
(1) 


action FD:--------
Modifies only variables in: 
{ }
----[input global]:
(0) 
----[input local]:
(0) 


action smoke1:--------
Modifies only variables in: 
{ FireDetector1.s }
----[input global]:
(
 (FireDetector1.s = 1)) 
----[input local]:
(
 (FireDetector1.s = 1)(
   (FireDetector1.s' = 2)) ) 


action smoke2:--------
Modifies only variables in: 
{ FireDetector2.s }
----[input global]:
(
 (FireDetector2.s = 1)) 
----[input local]:
(
 (FireDetector2.s = 1)(
   (FireDetector2.s' = 2)) ) 


endmodule
===================================

- : unit = ()

