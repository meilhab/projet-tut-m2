-- @path SequenceMetaModel=/Transformation/MetamodelSeq/SequenceMetamodel.ecore
-- @path TiccMetaModel=/Transformation/MetamodelTicc/TiccModel.ecore

module SequenceToTicc;
create OUT : TiccMetaModel from IN : SequenceMetaModel;

helper context SequenceMetaModel!Sequences def : isSequenceRoot() : Boolean =
	self.refImmediateComposite().oclIsUndefined();


helper context SequenceMetaModel!TypeMessage def : getAllMessages() : Bag(SequenceMetaModel!Message) =
	Bag(SequenceMetaModel!Message) = self.contains->asBag();

rule SequenceToModule{
	from s : SequenceMetaModel!Sequences
	to t : TiccMetaModel!Module (
		--nom <- s.nom,
		--TODO: faire 2 sequences et test si root bien détecté
		--TODO: controle premier message pour point d'entrée initial automate
		--TODO: récupération de tous les messages venant d'un TypeMessage 
		nom <- s.isSequenceRoot().toString(),
		--transition <- s.isComposedBy,
		transition <- s.isComposedBy->union(s.isDefinedBy->getAllMessages()),
		nbEtat <- SequenceMetaModel!NamedElement.allInstances()->asSet()->size(),
		etatInitial <- 0
	)
}

rule MessageToLocalInput{
	from s : SequenceMetaModel!Message(s.sendBy.nom = 'environnement')
	to t : TiccMetaModel!LocalInput(
		nom <- s.calls.nom,
		source <- s.sendBy.nom,
		destination <- s.receiveBy.nom
	)
}

rule MessageToOutput{
	from s : SequenceMetaModel!Message(s.receiveBy.nom = 'environnement')
	to t : TiccMetaModel!Output(
		nom <- s.calls.nom,
		source <- s.sendBy.nom,
		destination <- s.receiveBy.nom
	)
}

rule SequenceDiagramToTicc{
	from s : SequenceMetaModel!SequenceDiagram
	to t : TiccMetaModel!Ticc(
		possede <- s.contain	
	)
}

